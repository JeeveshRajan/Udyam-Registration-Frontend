version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: udyam-postgres
    environment:
      POSTGRES_DB: udyam_registration
      POSTGRES_USER: udyam_user
      POSTGRES_PASSWORD: udyam_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - udyam-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U udyam_user -d udyam_registration"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: udyam-backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://udyam_user:udyam_password@postgres:5432/udyam_registration
      PORT: 3001
      FRONTEND_URL: http://localhost:3000
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - udyam-network
    volumes:
      - ./backend:/app
      - /app/node_modules
    restart: unless-stopped

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: udyam-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - udyam-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: udyam-redis
    ports:
      - "6379:6379"
    networks:
      - udyam-network
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: udyam-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - udyam-network
    restart: unless-stopped

networks:
  udyam-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
